using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DustMother.Generators
{
    public class ExperimentalClassBuilder
    {
        public ExperimentalClassBuilder(string ns, string className)
        {
            ClassName = className;
            Namespace = ns;
        }

        private string Namespace { get; }

        private string ClassName { get; }

        public bool UseTypeName { get; set; } = true;

        private List<string> Namespaces { get; } = new();
        public ExperimentalClassBuilder AddImport(string ns)
        {
            Namespaces.Add(ns);
            return this;
        }

        public ExperimentalClassBuilder AddImport(INamespaceSymbol nsSyntax)
        {
            Namespaces.Add(nsSyntax.ToString());
            return this;
        }

        public ExperimentalClassBuilder AddImport(INamedTypeSymbol typeSymbol)
        {
            Namespaces.Add(typeSymbol.ContainingNamespace.ToString());
            return this;
        }

        public ExperimentalClassBuilder AddImports(IEnumerable<string> ns)
        {
            Namespaces.AddRange(ns);
            return this;
        }

        public ExperimentalClassBuilder AddMember(string memberCode)
        {
            Members.Add(memberCode);
            return this;
        }

        private string? GetTypeName(ITypeSymbol propertyType)
        {
            return UseTypeName ? $"{propertyType.Name}?" : propertyType.ToString();
        }

        public ExperimentalClassBuilder AddProperty(ITypeSymbol propertyType, string propertyName, params string[] propertyBody)
        {
            Members.Add($@"public {GetTypeName(propertyType)} {propertyName} {{
    {string.Join(Environment.NewLine, propertyBody)}
}}");
            return this;
        }

        public List<string> Members { get; } = new();

        public string Build()
        {
            var usings = string.Join(Environment.NewLine, Namespaces.Distinct().Select(ns => $"using {ns};"));
            var members = string.Join(Environment.NewLine, Members);
            var gen = $@"// <auto-generated />
#nullable enable annotations
using System.Collections.Generic;
{usings}

{(String.IsNullOrWhiteSpace(Namespace) ? null : $"namespace {Namespace}")}
{{
   public partial class {ClassName}
   {{
      {members}
   }}
}}
#nullable restore annotations
";
            return gen;
        }


    }
}
